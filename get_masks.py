# -*- coding: utf-8 -*-
"""get_masks.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15C0dPRie64t9fcuDRz5R4otGutMfsQS7
"""

import cv2 as cv
import os
from google.colab.patches import cv2_imshow
import glob
import numpy as np
import json
import skimage
import tifffile
import shutil

shell_image = cv.imread('/content/drive/MyDrive/Code Projects/Data/IAP UROP DATA/binary_data/Aquaculture Larvae.v2i.coco/train/thumbnail_IMG_3898-high-mortality-20231208_jpg.rf.ecf0b9c5fd7ab51bd936bff5b901dab8.jpg',cv.IMREAD_COLOR)

def load_annotations(file_path):
    with open(file_path) as file:
        data = json.load(file)
    return data

def load_image_paths(images_path,annotations):
    image_paths = {}
    im_ids = annotations['images']

    for file_path in glob.glob(os.path.join(images_path, '*.jpg')):
        name = str(file_path).split("/")[-1]
        #match annotations with their respective images
        for im in im_ids:

            if im['file_name'] == name:
                image_paths[im['id']] = file_path

    return image_paths

annotations_path = '/content/drive/MyDrive/Code Projects/Data/IAP UROP DATA/binary_data/Aquaculture Larvae.v2i.coco/train/_annotations.coco.json'
annotations_data = load_annotations(annotations_path)
images_path = '/content/drive/MyDrive/Code Projects/Data/IAP UROP DATA/binary_data/Aquaculture Larvae.v2i.coco/train'
image_paths = load_image_paths(images_path,annotations_data)

mask_output_folder = '/content/drive/MyDrive/Code Projects/Data/train_mask_output'  # Modify this as needed. Using val2 so my data is not overwritten
image_output_folder = '/content/drive/MyDrive/Code Projects/Data/train_im_output'  #
print(image_paths)

def create_mask(image_info, annotations, output_folder):
    # Create an empty mask as a numpy array
    mask_np = np.zeros((image_info['height'], image_info['width']), dtype=np.uint16)

    # Counter for the object number
    object_number = 1

    for ann in annotations:
        if ann['image_id'] == image_info['id']:
            # Extract segmentation polygon
            for seg in ann['segmentation']:
                if seg[0] != seg[-2] or seg[1] != seg[-1]:
                  seg.append(seg[0])
                  seg.append(seg[1])

                # Convert polygons to a binary mask and add it to the main mask
                rr, cc = skimage.draw.polygon(seg[1::2], seg[0::2], mask_np.shape)
                mask_np[rr, cc] = object_number
                object_number += 1  # We are assigning each object a unique integer value (labeled mask)


    # Save the numpy array as a TIFF using tifffile library
    mask_path = os.path.join(output_folder, image_info['file_name'].replace('.tif', '_mask.tif'))
    tifffile.imsave(mask_path, mask_np)

    print(f"Saved mask for {image_info['file_name']} to {mask_path}")

def images_and_features(current,images,labels,output):
    cnt = 0
    images = labels['images']
    annotations = labels['annotations']
    for img in images:

        print('AT IMAGE------------', img)
        #im = cv.imread(str(images[id]))
        #im = cv.cvtColor(im, cv.COLOR_BGR2RGB)

        create_mask(img,annotations,output)

a1 = images_and_features('its a go',image_paths,annotations_data,mask_output_folder)